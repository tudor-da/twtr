
module Tweet where

import DA.List as List
import DA.Next.Set as Set
-- Federated Twitter, where each follower needs to sign new tweets published by a user
-- Initially, we only care about new tweets (after the follower joined)

template Tweet 
  with
    sender: Party
    reviewers: Set Party
    content: Text
  where
    signatory sender, reviewers

template TweetProposal
  with
    signatories: Set Party
    tweet: Tweet
    remainingObservers: Set Party
  where
    signatory signatories
    observer remainingObservers
    choice TweetProposal_Sign: Either (ContractId TweetProposal) (ContractId Tweet)
        with newSigner: Party
      controller newSigner
        do
        let sortedSignatories = sort (newSigner :: ($) toList signatories)
        let sortedReviewers = sort (tweet.sender :: ($) toList tweet.reviewers)
        if(sortedReviewers == sortedSignatories) then
          fmap (Right) (create tweet)
        else fmap (Left) (create this with 
              remainingObservers = Set.filter (/=newSigner) remainingObservers 
              signatories = insert newSigner signatories)
    controller tweet.sender can
      Tweet_Release : ContractId Tweet
        do create tweet